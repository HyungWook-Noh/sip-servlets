<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>



<section id="&PLATFORM_NAME;-snmp-adaptor">
  <title>Monitoring &SHORT_PLATFORM_NAME; with SNMP</title>

<para>
This chapter provides information on how to enable the management of &SHORT_PLATFORM_NAME; Servers through SNMP. It also allows applications to expose their metrics and management through SNMP.
</para>

<para>
Any System and Application Administrator will not truly feel at ease without knowing what is going on with his servers. The same thing goes for those who have to manage an application server like &SHORT_PLATFORM_NAME; in a production environment. You need to be able to get an overview of what is going on in order to proactively fix issues before you get a phone call from users. With this in mind, the Simple Network Management Protocol was developed (SNMP). The fact that it says simple, doesnâ€™t mean it is simplistic. The protocol is very comprehensive and it has become an industry standard through it's many iterations. 
</para>

<formalpara>
<title>Understanding SNMP</title>
<para>
It is important to understand that SNMP is not just an application monitoring protocol but comprehensive network protocol that can be configured to keep an eye on both hardware and software. That means, an Administrator can get an overview of all the components on a local and remote network from a single interface. There are a few things that must be defined in order to get a working understanding of how SNMP can help you monitor &PLATFORM_NAME;. There are three important components to understand:
</para>
<para>


<itemizedlist mark='opencircle'>
<listitem> <para> Managed Devices (objects) </para> </listitem>
<listitem > <para> Agent </para> </listitem>
<listitem> <para> Manager (Network Management Systems)</para></listitem>
</itemizedlist>


<segmentedlist><title>SNMP Main Components</title>
<?dbhtml list-presentation="table"?>
<segtitle>Name</segtitle>
<segtitle>Description</segtitle>
<seglistitem><seg>Managed Devices</seg><seg> These are applications like &SHORT_PLATFORM_NAME; and devices like routers, switches, UPS, etc..</seg></seglistitem>
<seglistitem><seg>Agents</seg><seg> Software that runs on Managed devices. Agents gather information about the local system and send it to the Manager (NMS). It acts as an intermediate between the Managed devices and the Manager (NMS)</seg></seglistitem>
<seglistitem><seg>Manager (NMS)</seg><seg>This is the central application from which the System/Network Administrator will interact with all the managed devices. Some common Network Managed Systems (NMS) applications are Zenoss, OpenNMS, Nagios, SNMPC, HPOpenView, PRTG, OpManager, etc.</seg></seglistitem>
</segmentedlist>

</para>
</formalpara>


<para>

Diagram of managed device, Agent and Manager component within the framework of SNMP.

<figure>
	<title>Manager, Agent and Managed Object Interactions</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/snmp_diagram_overview.png"/>
        </imageobject>
      </mediaobject>
    </figure>


</para>


<formalpara>
<title> SNMP Versions</title>
<para>
There are 3 versions that are currently in use in the SNMP protocol framework. From version 1 to the current version 3, improvements have been made to the protocol to make it more robust and suitable for enterprise use, providing cryptographic security. Version 3 is of particular interest in &SHORT_PLATFORM_NAME; scheme because it provides for better security. SNMP version 3 offers a form of security that requires a  username, password and MD5, SHA authentication protocols to safely interact with Managed Devices. This is a better security layer than the Community String password that was used in previous versions. It is still possible to use all three versions simultaneously depending on your current system configuration.
</para>
</formalpara>

<formalpara>
<title> SNMP Object Identifier (OID)</title>
<para>
An OID is a set of variables that uniquely identifiers Managed objects in a Management Information Base (MIB) within the SNMP protocol framework. An OID hierarchy looks like the following:

<screen> 
ISO(1).Organization(3).Department of Defense(6).Internet(1).Private(4).Enterprises(1).Redhat(2132).JBOSS(100).Application Server(1)
 </screen>

<para>
Another form of presenting the above OID is as follows:
<screen>
1.3.6.1.4.1.2132.100.1
</screen>


<figure>
	<title>SNMP OID Hierarchy</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/snmp_JBOSS_MIB_Hierarchy.png"/>
        </imageobject>
      </mediaobject>
    </figure>

</para>


</para>
</formalpara>

<formalpara>
<title> Management Information Base (MIB) </title>
<para>
The MIB in SNMP defines a list of variables that describe specific information about managed devices. An example will be a MIB variable that measures the temperature of a network device. This temperature sensor variable can later be exposed to the Manager(NMS) through the SNMP Agent. The variables in a MIB are organized in a hierarchy that makes accessing needed information easier. The variables in a MIB are presented in two forms, Scalar and Tabular.
</para>
</formalpara>
<itemizedlist mark='opencircle'>
<listitem> <para> Scalar - These are variables that can only hold a single value at a time and are not part of an array or a table </para> </listitem>
<listitem > <para> Tabular - These variables have multiple related object instances and can be identified by the index value in a MIB table or array.  </para> </listitem>
</itemizedlist>

<para>
You don't have to worry overtly about the difference as you will become familiar with them the more you work with SNMP.
</para>





<formalpara>
<title> SNMP Protocol Data Unit (PDU) </title>
<para>
PDUs can be seen as packets used to interact with objects within the scope of SNMP. There are 7 available PDUs as of version 3 of the protocol. The ones that you will often have to deal with are listed below. 

<itemizedlist mark='opencircle'>
<listitem> <para> GetRequest: A PDU request from a Manager to an Agent requesting the value of specific OID variable. </para> </listitem>
<listitem> <para> SetRequest: A PDU request from a Manager to an Agent updating the value of an OID variable. </para> </listitem>
<listitem > <para>GetNextRequest: A Manger to an Agent requesting the next element from the current OID variable index.  </para> </listitem>
<listitem> <para> GetBulkRequest: Similar to the above but in multiple iterations</para></listitem>
<listitem> <para> Response: The acknowledgment from an Agent to a Manager after the Get, Set, Next and Bulk requests</para></listitem>
<listitem> <para> Trap: Notification from an Agent to a Manager activated after certain conditions are met.</para></listitem>
</itemizedlist>

</para>
</formalpara>



<note>
<title> Getting Detailed SNMP Information</title>
<para>The above presentation is just an overview of what SNMP is. If you want to learn more about the protocol, you can visit <ulink url="http://www.ietf.org/rfc/rfc1157.txt">RFC 1157 </ulink>
</para>
</note>

<para>
Before you proceed with the next &PLATFORM_NAME; SNMP section, you must install the NET-SNMP utility. This will help you test some of the SNMP principles discussed above. It will also help you quickly get a better understanding of how SNMP can help you monitor &SHORT_PLATFORM_NAME;.
</para>
<note>
<title> Installing NET-SNMP Binaries</title>
<para> You can follow this link to download the NET-SNMP binaries<ulink url= "http://net-snmp.sourceforge.net/download.html"> NET-SNMP Binary Download</ulink>
</para>
<para>If you are running on a Linux system like Fedora, you can run the following command to install NET-SNMP: </para>
</note>
<screen>yum install net-snmp net-snmp-libs net-snmp-utils</screen>

<para>
Once the installation is completed, you must start the snmp service
</para>
<screen> service snmpd start </screen>

<para> Now you can perform a quick test to make sure your installation is functional. </para>

<screen> snmpwalk -v 2c localhost -c public system </screen>


<para> Which should produce a result similar to the one below </para>

<screen>snmpbulkget -v 2c localhost -c public system
SNMPv2-MIB::sysDescr.0 = STRING: Linux linux-fedora 3.3.7-1.fc16.i686.PAE #1 SMP Tue May 22 14:07:22 UTC 2012 i686
SNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.10
DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (26551302) 3 days, 1:45:13.02
SNMPv2-MIB::sysContact.0 = STRING: Root &lt;root.localhost&gt; (configure /etc/snmp/snmp.local.conf)
SNMPv2-MIB::sysName.0 = STRING: linux-fedora
SNMPv2-MIB::sysLocation.0 = STRING: Costa Rica
SNMPv2-MIB::sysORLastChange.0 = Timeticks: (20) 0:00:00.20
SNMPv2-MIB::sysORID.1 = OID: SNMP-MPD-MIB::snmpMPDMIBObjects.3.1.1
SNMPv2-MIB::sysORID.2 = OID: SNMP-USER-BASED-SM-MIB::usmMIBCompliance
SNMPv2-MIB::sysORID.3 = OID: SNMP-FRAMEWORK-MIB::snmpFrameworkMIBCompliance
 </screen>

<para>
Because the local system has MIB files, the OIDs have been translated to a more readable output. You can run the following command to get the OID of a particular variable.
</para>

<screen>

snmptranslate -On SNMPv2-MIB::sysORID.1

produces : .1.3.6.1.2.1.1.9.1.2.1

snmptranslate -On SNMPv2-MIB::sysLocation.0

Produces: .1.3.6.1.2.1.1.6.0

snmpget -v 2c localhost -c public .1.3.6.1.2.1.1.6.0
Produces: SNMPv2-MIB::sysLocation.0 = STRING: Costa Rica


snmpgetnext -v 2c localhost -c public .1.3.6.1.2.1.1.6.0
produces: SNMPv2-MIB::sysORLastChange.0 = Timeticks: (20) 0:00:00.20

</screen>

<para>
At this point, you will need to make sure you have Java running on your system.

</para>
<note>
<title> Install JDK </title>
<para>Before you proceed to the next section, make sure you have the latest JDK SE installed on your system. You can run the (java -version) command to perform a check. If you need to install JDK, it is available for download <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">HERE</ulink> ,  
</para>
</note>




<section>
<title> Downloading and Working with &SHORT_PLATFORM_NAME;</title>

<para>
The SNMP examples above are given to help you setup your system to work with &SHORT_PLATFORM_NAME;.
You will need to get a copy of &SHORT_PLATFORM_NAME; binaries and have it installed on your system. The latest version is available for download at TeleStax Support portal at <ulink url="https://support.telestax.com"> Download &SHORT_PLATFORM_NAME; Binaries </ulink>
</para>


<para>
You need to perform the initial installation as explained in previous chapters of this &PLATFORM_NAME; guide. 
The &SHORT_PLATFORM_NAME; SNMP adaptor will allow you to monitor applications deployed on &PLATFORM_NAME; 
and send traps to any SNMP manager software you plan to use.  You need to extract the content of the binaries into a local directory. On some Linux, systems that will be in the /usr/share directory.
</para>
<note>
<title>$TELSCALE_HOME</title>
<para>The &SHORT_PLATFORM_NAME; directory in which you have extracted the binaries will be referred to as $TELSCALE_HOME.
</para>
</note>

<para>
You must also copy the Attributes.mib files that is located in your $TELSCALE_HOME/server/default/deploy/snmp-adaptor.sar/ directory to the correct directory where the NET-SNMP will access it.
If you don't know where to put your mib file or you are not getting any translated OID results, 
you can run the following command to see where the NET-SNMP tool is checking for mib files:
</para>
<screen>  snmpget -Dparse-mibs 2>&amp;1 | grep directory </screen>

<para>
In order to better understand this guide, please see the note below.
</para>
<note>
<title> SNMP Adaptor</title>
<para>
The $TELSCALE_HOME/server/default/deploy/snmp-adaptor.sar/ directory will be referred to as the $TELSCALE_SNMP_ADAPTOR_HOME/
</para>
</note>

<para> You need to start the &SHORT_PLATFORM_NAME;  in order to be able to try out the examples in the next section. Use the start script below:</para>

<screen> $TELSCALE_HOME/bin/run.sh </screen>

<para> This can take a few seconds to start depending on your system. You will see a lot of information about the &PLATFORM_NAME; server startup process on the terminal. If started successfully, you will see a STARTED message and the amount of time it took to start the &PLATFORM_NAME; server. </para>
<para>

Using version 3 of SNMP requires setting up a user and a password. When you install &PLATFORM_NAME;, a TEST user and password have already been created in the $TELSCALE_SNMP_ADAPTOR_HOME/user.xml file. You can change the username and password at your convenience when working in a production environment.
</para>

<para> Try the command below: </para>

<screen>
 snmpget -v 3 -u TEST -a MD5 -A &quot;maplesyrup&quot; -x DES -X &quot;maplesyrup&quot; -l authPriv 127.0.0.1:1161 .1.3.6.1.2.1.1.1.0 
 </screen>
 
 <para> This should produce the following results: </para>
<screen>
SNMPv2-MIB::sysDescr.0 = STRING: TelScale Sip Servlets 
</screen>

<para>
If you get a Snmpget timeout, make sure the &PLATFORM_NAME; Server is running.
</para>

<para> When you start the &PLATFORM_NAME; server using the $TELSCALE_HOME/bin/run.sh as mentioned above, it will automatically 
send a trap to any SNMP manager configured to receive traps on the default SNMP trap port. There will be more about sending traps later.</para>

</section>

<section>
<title>Exposing Applications Through SNMP</title>
 

<para>

In order to prepare for this section and use the sample SNMP-Servlet, you need to download the sample SNMP application here: 
 <ulink url="https://www.dropbox.com/s/45k3li1l4yypdlw/snmp-servlet.zip"> Snmp-servlet.zip.</ulink>
 

</para>

<para>

Extract the content of the file to the $TELSCALE_HOME/server/default/deploy directory. 
</para>



<para>

This basic web application provides a web page that displays an incremental counter each time the page is refreshed. Alternatively, a message can be set through JMX that will be displayed on the web page. The application also registers a MBean, thus, providing a way to expose data to SNMP. This is achieved through the snmp-notifications.xml and snmp-attributes.xml files that are included in the SNMP-Servlet sample application. 

<note>
<title>&PLATFORM_NAME; SNMP Deployer</title>

<para>
Any web application deploy in the $TELSCALE_HOME/server/&lt;profile&gt;/deploy directory will be scanned by the $TELSCALE_HOME/server/&lt;profile&gt;/deployers/snmp.deployer. The deployer will try to locate any attributes.xml and notifications.xml files in a deployed application and register them with the &PLATFORM_NAME; SNMP service.
</para>
</note>

</para>


<para>
There are 3 important files needed to expose your applications metrics and send SNMP traps.
</para>



<segmentedlist><title>SNMP Main Components</title>
<?dbhtml list-presentation="table"?>
<segtitle>Name</segtitle>
<segtitle>Description</segtitle>
<seglistitem><seg>attributes.xml</seg><seg> Maps SNMP oids to MBean attribute get/set </seg></seglistitem>
<seglistitem><seg>managers.xml</seg><seg>Configures where to send traps</seg></seglistitem>
<seglistitem><seg>notifications.xml</seg><seg>Specifies the exact mapping of each jmx notification type
    to a corresponding SNMP OID trap</seg></seglistitem>
</segmentedlist>

<formalpara>
<title>notification.xml and traps</title>
You can see an extract from the notification.xml file below. This configuration file controls the mapping of JMX notification onto SNMP traps. It is responsible for the automatic coldstart trap sent to the SNMP monitoring applications. There will be more on that later. The file is located at.
</formalpara>

<screen>
$TELSCALE_SNMP_ADAPTOR_HOME/notifications.xml
</screen>

<para>
Here is an extract from the file:
</para>

<screen>
&lt;mapping name=&quot;jbossAsColdstartNotification&quot; notification-type=&quot;jboss.snmp.agent.coldstart&quot; generic=&quot;0&quot; specific=&quot;1&quot; enterprise=&quot;1.3.6.1.4.1.2312.100.1.2&quot; inform=&quot;false&quot; security-name=&quot;TEST&quot;&gt;
    &lt;var-bind-list wrapper-class=&quot;org.jboss.jmx.adaptor.snmp.agent.NotificationWrapperSupport&quot;&gt;
      &lt;var-bind tag=&quot;a:startTime&quot; oid=&quot;1.3.6.1.4.1.2312.100.1.1.4&quot;/&gt;
      &lt;var-bind tag=&quot;a:trapCount&quot; oid=&quot;1.3.6.1.4.1.2312.100.1.1.5&quot;/&gt;
    &lt;/var-bind-list&gt;               
  &lt;/mapping&gt;

</screen>

<para>
You can run an snmpget command to query the OID from the notifications.xml file as follows: 
</para>
<screen>
 snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 1.3.6.1.4.1.2312.100.1.1.5.0
</screen>

<para>
produces this output:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.1.1.5.0 = STRING: "6"
</screen>
<para>
Try the next command:
</para>
<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 1.3.6.1.4.1.2312.100.1.1.4.0
</screen>

<para>
The output will be as follows:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.1.1.4.0 = STRING: "1338820394732"
</screen>

<formalpara>
<title> manager.xml file</title>

<para>
SNMP adaptor can be configured to send traps to a Network Management Systems (NMS) like Zenoss, OpenNMS, and Nagios. It can be done in the $TELSCALE_SNMP_ADAPTOR_HOME/manager.xml file. The default configuration sends traps to the localhost.
</para>

<para>
Below is an extract from the manager.xml using SNMP version 3. You can specify the NMS destination ip address and listening port and other variables needed to make sure &SHORT_PLATFORM_NAME; knows where to send the correct data. 
</para>
<para>
The default configuration below points to the localhost and will work out of the box if you are running &PLATFORM_NAME; on a single server.
</para>

 
<screen>
  <!-- v3 manager -->
  &lt;manager&gt;
    &lt;address&gt;localhost&lt;/address&gt;
    &lt;port&gt;162&lt;/port&gt;
    &lt;local-address&gt;&lt;/local-address&gt;
    &lt;local-port&gt;&lt;/local-port&gt;
    &lt;version&gt;3&lt;/version&gt;
  &lt;/manager&gt;
</screen>

<formalpara>
<title> attributes.xml file</title>
<para>
This file is of particular interest to those who wish to use &SHORT_PLATFORM_NAME; to run web applications. It provides an easy way to map MBeans attributes to SNMP OIDs. This will allow System Administrators to set metrics for monitoring their web application server.
</para>
</formalpara>

<para>
An snmp-attributes.xmlfile is included in the SNMP-Servlet application. There is a default attributes.xml file that is included in the $TELSCALE_SNMP_ADAPTOR_HOME. For the purpose of this guide, the snmp-attributes.xml will be reviewed below.
</para>

<screen>

&lt;attribute-mappings&gt;
   
   &lt;mbean name=&quot;test.com:service=SnmpTest&quot; oid-prefix=&quot;.1.3.6.1.4.1.2312.100.21.11&quot; definition-name=&quot;snmpTestObjects&quot;&gt;
      &lt;attribute name=&quot;Message&quot; oid=&quot;.1&quot; mode=&quot;rw&quot;/&gt;
      &lt;attribute name=&quot;Count&quot; oid=&quot;.2&quot;/&gt;
      &lt;attribute name=&quot;MessageHistory&quot; oid=&quot;.3.1&quot; table=&quot;true&quot; mode=&quot;rw&quot;/&gt;
      &lt;attribute name=&quot;MessageHistoryAsArray&quot; oid=&quot;.4.1&quot; table=&quot;true&quot; mode=&quot;rw&quot;/&gt;
      &lt;attribute name=&quot;CountHistory&quot; oid=&quot;.5.1&quot; table=&quot;true&quot; mode=&quot;rw&quot;/&gt;
      &lt;attribute name=&quot;MessageCountHistory&quot; oid=&quot;.6.1&quot; table=&quot;true&quot; mode=&quot;rw&quot;/&gt;
   &lt;/mbean&gt;
   
&lt;/attribute-mappings&gt;



</screen>


<para>

<segmentedlist><title> Sample SNMP Servlet - Understanding MBeans Attributes</title>
<?dbhtml list-presentation="table"?>
<segtitle>Attribute Name</segtitle>
<segtitle>Description</segtitle>
<seglistitem><seg>Counter</seg><seg> The current value of the counter</seg></seglistitem>
<seglistitem><seg>Message</seg><seg> Allows to retrieve and set the value of the message that will be displayed on the page along with the counter</seg></seglistitem>
<seglistitem><seg>MessageHistoryAsArray</seg><seg> All the values that have been set since the application is running returned as a String array.</seg></seglistitem>
<seglistitem><seg>messageHistory</seg><seg> all the values that have been set since the application is running returned as a java.util.List&lt;String&gt;</seg></seglistitem>
<seglistitem><seg> countHistory</seg><seg> All the values that have been displayed since the application is running returned as a primitive int array.</seg></seglistitem>
<seglistitem><seg>messageCountHistory</seg><seg>Map which have as a key the message and as a value the corresponding counter value that was present when the message was set.</seg></seglistitem>
</segmentedlist>


 <figure>
<title>Snmp Adaptor and Mbeans Overview</title>
<mediaobject id="snmp-overview-exposing-mbeans">
<imageobject>
<imagedata align="center" fileref="images/snmp_overview_exposing_mbeans.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 





The sample application will make use of the SNMP Agent MBean Service to send an SNMP trap (coldStart) when the application is deployed within &PLATFORM_NAME;. The SNMP-servlet attributes listed above will be used for testing the different SNMP PDUs.


</para>





<para>
Start the &PLATFORM_NAME; server by running the start script below:
</para>
<screen>
$TELSCALE_HOME/bin/run.sh
</screen>
<para>
Once the server is started, go to your web browser and enter the followng address:
</para>
<para>
<ulink url="http://127.0.0.1:8080/jmx-console/" />
</para>

<para>
This will show you a screenshot like the one below. Click on the &quot;Test.com&quot; link in the left column. </para>


 <figure>
<title>Snmp Jmx Console</title>
<mediaobject id="snmp-jmx-console">
<imageobject>
<imagedata align="center" fileref="images/snmp-jmx-console.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>

<para>
 Then click on the &quot;service=SnmpTest&quot; which will show the screenshot below:
</para>


 <figure>
<title>Snmp Jmx Snmp Test Homepage</title>
<mediaobject id="snmp-jmx-snmp-test-homepage">
<imageobject>
<imagedata align="center" fileref="images/snmp-jmxsnmptest-homepage.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>

<para>
In the Message row under the  Attribute Value column, type
</para>
<screen>
First Message then press the &quot;Apply Changes&quot; button.
Second Message then press the &quot;Apply Changes&quot; button.
Third Message then press the &quot;Apply Changes&quot; button.
</screen>
<para>
This should produce a result similar to the screen below:
</para>



 <figure>
<title>Snmp Jmx Messages Screen</title>
<mediaobject id="snmp-jmx-messages-screen">
<imageobject>
<imagedata align="center" fileref="images/snmp-jmxmessages-screen.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 

<para>
Make sure you have extracted the SNMP-servlet.zip file as instructed above into the $TELSCALE_HOME/server/default/deploy directory.
</para>
<para> You should be able to access the sample servlet in your browser as follows: </para>

<screen> http://127.0.0.1:8080/snmp-servlet-5.1.0.GA/snmp </screen>

<para>
You will see a screen similar to this </para>




 <figure>
<title>Snmp Sample Servlet Counter Page</title>
<mediaobject id="snmp-sample-servlet-counter-page">
<imageobject>
<imagedata align="center" fileref="images/snmp-sample-servlet-counterpage.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 

<para>
Refresh the screen a few times to see the number increase. Run the command below:  </para>


</formalpara>



<screen>
 snmpbulkget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1
</screen>

<para>
The snmpulkget is an easy way to retrieve the data in the 3.1 column without the 
need to iterate through each set with the snmpget. It will produce the following:
</para>

<screen>
 
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.1 = STRING: "First Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.2 = STRING: "Second Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.3 = STRING: "Third Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.3 = No more variables left in this MIB View (It is past the end of the MIB tree)

</screen>
<para>
Now let us try using the snmpget command to individually access the variables.
</para>

<screen>
 snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1.2.1
</screen>
<para>
It will produce the following:
</para>

<screen>
 
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.1 = STRING: "First Message"

</screen>

<para>

You can run the same snmpget command to query the second message.

</para>

<screen>
 snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1.2.2
 </screen>

<para>
It will produce the following:
</para>


<screen>
  
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.2 = STRING: "Second Message"
</screen>

<para>
If you want to get the amount of times you have refreshed the counter snmp servlet 
application you can quickly do an snmpbulkget. 
In the example below, the page has been refreshed 6 times. </para>

<screen>

snmpbulkget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.5.1
</screen>
<para>
It will produce the following:
</para>


<screen>

SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.1 = INTEGER: 1
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.2 = INTEGER: 2
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.3 = INTEGER: 3
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.4 = INTEGER: 4
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.5 = INTEGER: 5
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.6 = INTEGER: 6
SNMPv2-SMI::enterprises.2312.100.10.11.5.1.2.6 = No more variables left in this MIB View (It is past the end of the MIB tree)

</screen>

<para>
The same data can be seen in the jmx-console snmp servlet page as follows:  </para>


 <figure>
<title>Snmp Jmx Counter Page</title>
<mediaobject id="snmp-jmx-counter-page">
<imageobject>
<imagedata align="center" fileref="images/snmp-jmx-counter-page.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 

<para>
Updating the First Message you set in the Jmx-Console can be done using the SNMPSET command as follows: </para>

<screen>
snmpset -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1.2.1 s "replacing First Message"
</screen>

<para>
It will produce the result:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.1 = STRING: "replacing First Message"
</screen>


<para>
Now go to the Jmx-console web interface http://127.0.0.1:8080/jmx-console/ &gt; test.com &gt; service=SnmpTest 
You will see a screen similar to the one below with the updated message you set using the snmpset command. </para>



 <figure>
<title>Snmp Jmx Replace First Message</title>
<mediaobject id="snmp-jmx-replace-first-message">
<imageobject>
<imagedata align="center" fileref="images/snmp-jmx-replace-first-message.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 


<para>Try to access the new string you set with the snmpget command </para>

<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1.2.1 
</screen>

<para>
It will produce the following:
</para>


<screen>

SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.1 = STRING: "replacing First Message"

</screen>
</section>

<section>
<title>Accessing MBeans JMX - Scalar, Tabular and Wildcards Objects </title>

<section>
<title> Scalar Objects </title>
<para>
Scalar OID objects as mentioned previously, can only hold a single value at at time. The OIDs ends in zero (0) as shown in the example below with the snmpget command. If you remove the zero from the OID like this (.1.3.6.1.2.1.1.1), it will produce an error message saying (SNMPv2-MIB::sysDescr = No Such Object available on this agent at this OID)
</para>
<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.2.1.1.1.0
</screen>
</section>

<section>
<title> Tabular Objects</title>

<formalpara>
<title> Index Based Tabular Objects</title>
<para>
The examples that have been used in the SNMP-servlet are all based on tables and arrays with primitive types like int, long, boolean,etc are used for scalar objects. If you take a close look at the SNMP-servlet in the jmx-console, you would have noticed that tabular objects use the java.util.map and java.util.list. The java.util.Map is used for key based tables. More on that further down.

</para>
<para>
Let's revisit the SNMP-servlet we used previously. 
</para>
<screen>
 snmpbulkget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.3.1
</screen>

<para>
The snmpbulkget command will produce a list of value that you entered using the jmx-console. The result will be something similar to the one below:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.1 = STRING: "First Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.2 = STRING: "Second Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.3 = STRING: "Third Message"
SNMPv2-SMI::enterprises.2312.100.10.11.3.1.2.3 = No more variables left in this MIB View (It is past the end of the MIB tree)

</screen>

<para>
Notice that the the result produced a different OID than for scalar objects.
</para>

<screen>
The output is a concatenation of the oid prefix (.1.3.6.1.4.1.2312.100.10.11) + the MessageCountHistory OID (6.1) + the value column (.2) + the index of the value to retrieve
</screen>

<para></para>

<note>
<title>Index Based Table reminder</title>
<para>to access the index 0, .1 should be used because .0 are reserved for scalar objects
</para>
</note>
</formalpara>

<formalpara>
<title>Key Based Tabular Objects</title>
<para>
As opposed to an index based Tabular Object, key based tables cannot be directly accessed just by looking at the content of the attribute.xml file. You will need to perform an snmpgetnext on the based OID and then do a direct snmpget on the resulting OID. For example, the  MessageCountHistory table attribute has the OID .1.3.6.1.4.1.2312.100.10.11.6.1. It is actually possible to iterate through the full table by issuing a set of GetNextRequest SNMP PDU. To iterate through the MessageCountHistory table the following commands should be issued:
</para>

<screen>
snmpgetnext -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.6.1
</screen>

<para>
Produces the result below:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.10.11.6.1.2.109.101.115.115.97.103.101.32.53 = INTEGER: 8
</screen>

<para> Notice that the the result produced a different OID.</para>

<screen>
The output is a concatenation of the oid prefix (.1.3.6.1.4.1.2312.100.10.11) + the MessageCountHistory OID (6.1) + the value column (.2) + the ASN.1 representation of the key of the table
</screen>
<para>
 Because the data type of the data type of MessageCountHistory mbean attribute name is java.util.map (key based table) trying to access the OID directly with snmpget like an indexed table (OID.6.1 )will fail as can be seen below. That is the difference between an indexed based table and an key based table.
</para>
<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.10.11.6.1
</screen>

<para>
Produces the result below:
</para>

<screen>
Error in packet
Reason: (genError) A general failure occured
Failed object: SNMPv2-SMI::enterprises.2312.100.10.11.6.1

</screen>

<para>
If you want to access the value of the (OID 6.1) directly, you need to first use the snmpgetnext. This will give you the extended OID that you can then query like below:
</para>

<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 enterprises.2312.100.10.11.6.1.2.109.101.115.115.97.103.101.32.53
</screen>

<para>
This will generate the following result:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.10.11.6.1.2.109.101.115.115.97.103.101.32.53 = INTEGER: 8
</screen>
</formalpara>
</section>


<section>
<title> Wildcards MBean Names</title>

<screen>
&lt;!- Web Apps -&gt;
   &lt;mbean name=&quot;jboss.web:host=localhost,path=/*,type=Manager&quot; oid-prefix=&quot;.1.3.6.1.4.1.2312.100.1.1.12.1&quot;&gt;
      &lt;attribute name=&quot;distributable&quot; oid=&quot;.1&quot;/&gt;
      &lt;attribute name=&quot;sessionCounter&quot; oid=&quot;.2&quot;/&gt;
      &lt;attribute name=&quot;activeSessions&quot; oid=&quot;.3&quot;/&gt;
      &lt;attribute name=&quot;maxActiveSessions&quot; oid=&quot;.4&quot; mode=&quot;rw&quot;/&gt;
      &lt;attribute name=&quot;sessionAverageAliveTime&quot; oid=&quot;.5&quot;/&gt;      
      &lt;attribute name=&quot;expiredSessions&quot; oid=&quot;.6&quot;/&gt;      
      &lt;attribute name=&quot;rejectedSessions&quot; oid=&quot;.7&quot;/&gt;
      &lt;attribute name=&quot;maxInactiveInterval&quot; oid=&quot;.8&quot;/&gt;
      &lt;attribute name=&quot;sessionMaxAliveTime&quot; oid=&quot;.9&quot;/&gt;                  
   &lt;/mbean&gt;
</screen>
<para>
The above is an extract from the attributes.xml that can be found in the $TELSCALE_SNMP_ADAPTOR_HOME. Using wildcards to specify the mbean name can be convenient when you want to access attribues from a list of JMX objects. The example above tells JMX to search for all web applications deployed in the server through the mbean names having these values &quot;jboss.web:host=localhost,path=/*, type=Manager&quot; the wildcard is  (*). The wildcard can be seen as a filter. 
</para>
<para>
You can access the values like you did previously for a key based table.
</para>

<screen>
 snmpgetnext -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 .1.3.6.1.4.1.2312.100.1.1.12.1
</screen>
<para>
The output will be as follows: 
</para>
<screen>
SNMPv2-SMI::enterprises.2312.100.1.1.12.1.2.106.98.111.115.115.46.119.101.98.58.116.121.112.101.61.77.97.110.97.103.101.114.44.112.97.116.104.61.47.44.104.111.115.116.61.108.111.99.97.108.104.111.115.116 = INTEGER: 0
</screen>
<para>
You can use the OID of the above results to access the value directly through snmpget
</para>
<screen>
snmpget -v 3 -u TEST -a MD5 -A "maplesyrup" -x DES -X "maplesyrup" -l authPriv 127.0.0.1:1161 enterprises.2312.100.1.1.12.1.2.106.98.111.115.115.46.119.101.98.58.116.121.112.101.61.77.97.110.97.103.101.114.44.112.97.116.104.61.47.44.104.111.115.116.61.108.111.99.97.108.104.111.115.116
</screen>

<para>
It will produce the result below:
</para>

<screen>
SNMPv2-SMI::enterprises.2312.100.1.1.12.1.2.106.98.111.115.115.46.119.101.98.58.116.121.112.101.61.77.97.110.97.103.101.114.44.112.97.116.104.61.47.44.104.111.115.116.61.108.111.99.97.108.104.111.115.116 = INTEGER: 0
</screen>

<para> Notice that the the result produced an OID similar to key based table.</para>

<screen>
The OID is the concatenation of the OID prefix (.1.3.6.1.4.1.2312.100.1.1.12.1), first attribute (distributable, .2) and the ASN.1 representation of the following web application ObjectName "jboss.web:type=Manager,path=/,host=localhost"
</screen>
<para>
You can use <literal>snmpbulkget</literal> and <literal>snmpwalk</literal> to iterate through the rest of the table.

</para>


</section>

</section>




<section>
<title> Using a Network Management System (NMS) with &SHORT_PLATFORM_NAME;</title>
<para>
Up until now, you have used a command line program to interact with SNMP and &PLATFORM_NAME;. This next section will use an NMS to monitor SNMP.
</para>

<para>
In order to facilitate quick deployment and allow System and Network Administrators to quickly familiarize themselves with  &SHORT_PLATFORM_NAME;, this guide will use the OpenNMS application
</para>

<section>
<title> Installing OpenNMS</title>

<note>
<title> Yum OpenNMS repository </title>
<para>
You can check out the OpenNMS repository to download the binaries for your Linux OS version: 
<ulink url="http://yum.opennms.org"> Download OpenNMS for Linux Redhat and Fedora</ulink>
</para>
</note>

 
  <para>    Prepare the opennms package </para>
   <screen> rpm -Uvh http://yum.opennms.org/repofiles/opennms-repo-stable-fc16.noarch.rpm </screen>
  <para>  You need to make sure that your system is able to find the package. You can check this by doing the following: </para>
  <screen> yum search openNMS </screen>
  <para> This will be installed later. First, you must install the database that will hold the monitored information</para>
  
<screen> yum install postgresql postgresql-server </screen>

<para>You must initialize the database and start up postgresql </para>
  


<screen> service postgresql initdb </screen>
<screen> service postgresql start </screen>

<para> You need to run this command so that the database will be started after reboot</para>
<screen> chkconfig postgresql on </screen>

<para> on some systems you will have to run</para>

<screen> systemctl enable postgresql.service </screen>

<para>Edit this file /var/lib/pgsql/data/pg_hba.conf so that the content looks like this: </para>

<screen>
local   all         all                               trust
host    all         all         127.0.0.1/32          trust
host    all         all         ::1/128               trust

</screen>

<para> At this stage, you need to make sure JDK is installed on your system and the $JAVA_HOME environment variable is set. </para>

<para> The next step will be to install OpenNMS. </para>
<screen> yum -y install opennms  </screen>



<para> Once  the complete message appears, you might need to disable automatic update of openNMS in order to 
avoid changes to your current configuration. You can do the following: </para>

<para> edit the  "/etc/yum.repos.d/opennms*" file and add the  <emphasis role="color:#000000">enabled=0 </emphasis> inside each [opennms-*] section </para>

<para>You can undo this later if you need to </para>

<para> OpenNMS needs to know the location of your Java installation and which version to use in case you system has multiple versions. In the /usr/java/ directory, you might see  multiple version. 
</para>

<para> You need to run this command as root </para>

<screen> /opt/opennms/bin/runjava -S /usr/java/jdk1.7.0_04/bin/java </screen>

<para> This will produce an output similar to this</para>
<screen> runjava: checking specified JRE: "/usr/java/jdk1.7.0_04/bin/java"...
runjava: specified JRE is good.
runjava: value of "/usr/java/jdk1.7.0_04/bin/java" stored in configuration file
</screen>

<para>Create a  database by running the command</para>

<screen> /opt/opennms/bin/install -dis
</screen>

<note>

   <para> If you get an error message like this </para>

  <para> 
  Caused by: org.postgresql.util.PSQLException: FATAL: Ident authentication failed for user "postgres"
  </para>
</note>

<para> 
Make sure you have edited the <emphasis role="color:#000000"> /var/lib/pgsql/data/pg_hba.conf</emphasis> file as mentioned above.
The column METHOD should be set to <emphasis role="color:#000000"> &quot;trust&quot; </emphasis>
</para>

<para>
Then retry installing your database  <emphasis role="color:#000000">  /opt/opennms/bin/install -dis </emphasis> </para>
<para>
If all goes well, you should see
</para>
<screen>
....(truncated output)....
- checking if iplike is usable... NO
- removing existing iplike definition (if any)... OK
- inserting C iplike function... SKIPPED (location of iplike function not set)
- inserting PL/pgSQL iplike function... OK
- checking for stale eventtime.so references... OK
Installer completed successfully!
</screen>


<para> Under certain circumstances (firewall), it might be necessary to configure /etc/sysconfig/iptables to allow port 8980 
which is what OpenNMS uses. If you will only be using 127.0.0.1 on your localhost, then you don't need to to this</para>

<para> Next, you will need to start OpenNMS</para>

<screen> service opennms start </screen>

<note>

<para> if you get the following error whilst Starting opennms (via systemctl):  
Job failed. See system logs and 'systemctl status' for details.[FAILED]  </para>

</note>

<para> Try restarting Postgresql </para>
<screen> service postgresql restart </screen>
<para> then start OpenNMS like this: </para>

<screen> service opennms start </screen> 

 
 <para> Once the OpenNMS service is started, you should be able to access the web interface on the following address: </para>
 
 <screen> http://127.0.0.1:8980/opennms </screen>

<note>
<title>Debian Installation</title>
<para>
A debian version of this OpenNMS installation guide is available at <ulink url="http://www.opennms.org/wiki/Installation:Debian"/>
</para>
</note>

 </section>
 
 <section>
 <title> Accessing the OpenNMS Web Interface</title>
 <screen>
Login into OpenNms with the default  username and password

default user account
username = admin
password = admin

 </screen>
 
 
 
 <figure>
<title>Login Page OpenNMS</title>
<mediaobject id="login_page_opennms">
<imageobject>
<imagedata align="center" fileref="images/snmp-opennms-login-page.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>
 
 <para>
 
 You will notice that you have little to no data on your OpenNms web server. 
 You need to run this perl command to do an initial scan of your system. </para>
<screen>
 perl $OPENNMS_HOME/bin/send-event.pl uei.opennms.org/internal/discovery/newSuspect -i 192.168.1.3
</screen>

<para>
where 192.168.1.3 is the ip address of the OpenNms server
</para>
<para>
Now go to the http://192.168.1.3:8980/opennms/  web page and click on the menu > Node List
you should see that your server has been scanned and services are available like this screen shot below
</para>
 

 <figure>
<title>Scan Node Lists</title>
<mediaobject id="scan_node_list">
<imageobject>
<imagedata align="center" fileref="images/snmp-opennms-scanned-services-page.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 

</section>


  <section>
  
  <title> Setting up SNMP to monitor &PLATFORM_NAME; traps </title>


<para>
You must have Net-Snmp installed on your system. Execute the following test commands. These are independent of the &PLATFORM_NAME; snmp adaptor, but will help you run generic snmp queries.
</para>

<para>
In order to make sure your OpenNMS installation is receiving traps, you need to send traps to the OpenNms server. You can run the following command:
</para>
<screen>
<code> snmptrap -v 2c -c public localhost &quot; &quot; ucdStart sysContact s &quot;TESTTING TRAPS&quot; </code>
</screen>
<para>
then go into the   http://127.0.0.1:8980/opennms/ > events > all events > and you will see a screenshot similar to the one below.
</para>

 <figure>
<title>OpenNMS Receiving Traps</title>
<mediaobject id="opennms_receiving_traps">
<imageobject>
<imagedata align="center" fileref="images/snmp-opennms-testing-traps.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 



<formalpara>
<title> Default SNMP Adaptor Traps</title>

<para> 
The &SHORT_PLATFORM_NAME; SNMP adaptor comes configured with a default trap that will help you get acquainted with setting traps and monitoring your applications. The sample trap can be found in the $TELSCALE_SNMP_ADAPTOR_HOME/notifications.xml. In most configurations, the &quot;coldStart&quot; will be automatically activated and a trap will be sent to the OpenNMS application whenever you start &PLATOFRM_NAME;. The heartbeat trap is useful for sending periodic messages to any Network Management System. Below is a screenshot of the heartbeat notification trap:
</para>
</formalpara> 

 <figure>
<title>HeartbeatTraps</title>
<mediaobject id="opennms_heartbeat_traps">
<imageobject>
<imagedata align="center" fileref="images/snmp_heartbeat_trap.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure> 

<para>
If you are unable to see the hearbeat trap in the OpenNMS application, make sure the hearbeatPeriod variable is set to a value higher than zero. You need to go to the $TELSCALE_SNMP_ADAPTOR_HOME/META-INF/jboss-service.xml file. There is an attribute in this file that you will need to update
</para>
 
 <para>
If the value is as follows:
</para>

<screen>
    &lt;attribute name=&quot;HeartBeatPeriod&quot;&gt;0&lt;/attribute&gt;
</screen>

<para>
Change it to:
</para>

<screen>
    &lt;attribute name=&quot;HeartBeatPeriod&quot;&gt;20&lt;/attribute&gt;
</screen>

<para> The HeartBeatPeriod variable is in seconds and the above change will send a trap message every 20 seconds. 
</para>

<note>
<title> notification.xml file</title>
<para>
The $TELSCALE_SNMP_ADAPTOR_HOME contains 2 notifications files. There is the mss-notifications.xml and the notification.xml file. If you plan to modify the files for test purposes, you will need to make sure the jboss-service.xml file is pointing to the file you are working on. The default file is mss-notifications.xml. That can be changed in the jboss-service.xml file.
</para>
</note>

  </section>
</section>
<section>
<title> Generating MIB Files</title>



    <para>Included in the SNMP Adaptor is a way for a user to generate an SNMP MIB file based on already defined attributes in the attributes.xml and the notifications.xml. This MIB file allows an SNMP manager to display metrics with easy to read OID descriptions. The MIB generator makes it straight forward to produce MIB files.</para>
 

     <para>A MIB is not necessary for the operation of an SNMP manager. However, it makes a System Administrators task easier when it comes to troubleshooting traps recieved on the Network Management System (NMS) interface.</para>

        <para>
Snmpget results without a MIB:
</para>
          <screen>[thauser@tommycat mibs]$ snmpget -v1 -c public 127.0.0.1:1161 1.3.6.1.4.1.2312.100.1.1.1.0
iso.3.6.1.4.1.2312.100.1.1.1.0 = INTEGER: 109</screen>

<para>
Snmpget with a MIB file gives a better description of the value generated:
</para>        

          <screen>[thauser@tommycat mibs]$ snmpget -v1 -c public 127.0.0.1:1161 1.3.6.1.4.1.2312.100.1.1.1.0
JBOSS-AS-MIB::activeThreadCount.0 = INTEGER: 109</screen>
        

<section>
<title> Understanding Attributes.xml and MIB Files</title>



<screen>
<para>
Below is an extract from the $TELSCALE_SNMP_ADAPTOR_HOME/attributes.xml file
</para>

 &lt;/mbean&gt;

   &lt;!-- system information group see RFC-1213 --&gt;
   &lt;mbean name=&quot;jboss.jmx:name=SnmpAgent,service=MIB2SystemGroup&quot; oid-prefix=&quot;.1.3.6.1.2.1.1&quot; definition-name=&quot;system&quot;&gt;
      &lt;attribute name=&quot;SysDescr&quot; oid=&quot;.1&quot; mode=&quot;rw&quot; description=&quot;A description of this System.&quot;/&gt; &lt;!-- can be modified over snmp --&gt;
      &lt;attribute name=&quot;SysObjectId&quot; oid=&quot;.2&quot; description=&quot;The OID Denoting this system.&quot;/&gt;
      &lt;attribute name=&quot;SysUpTime&quot; oid=&quot;.3&quot; description=&quot;The time this system has been online.&quot;/&gt;
      &lt;attribute name=&quot;SysContact&quot; oid=&quot;.4&quot; description=&quot;The person who is admin to this system.&quot;/&gt;
      &lt;attribute name=&quot;SysName&quot; oid=&quot;.5&quot; description=&quot;The name this system is known by.&quot;/&gt;
      &lt;attribute name=&quot;SysLocation&quot; oid=&quot;.6&quot; description=&quot;The physical location of this system.&quot;/&gt;
      &lt;attribute name=&quot;SysServices&quot; oid=&quot;.7&quot; description=&quot;The services provided by this system.&quot;/&gt;
   &lt;/mbean&gt;


</screen>

        <para> In order to be able to understand and expose &PLATFORM_NAME; applications variables to the SNMP adaptor through MBeans, you need to take a look at the tag description used in the attributes.xml as explained below:</para>
        <informaltable>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Purpose
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Importance
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Default Value
                    
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The name of the metric on the MBean. Must match exactly to such a metric.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    oid
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The numeric identifier SNMP uses to identify this particular attribute. Can be a single number, or a full OID, if the &lt;mbean&gt; doesn't define a prefix.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    mode
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Indicates whether this MBean attribute should be writeable via SNMP.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    ro (read only)
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    snmp-type
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    MIB Generator specific. The type SNMP managers should attempt to interpret this attribute as.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    OCTET STRING (SIZE (0..255))
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    max-access
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    MIB Generator specific. Set the type of access SNMP managers should have to this attribute.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    read-only
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    description
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    MIB Generator specific. A description of the attribute that will be place in the MIB.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    ""
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    status
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    MIB Generator specific. The SNMP STATUS of this attribute.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    current
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    table
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    MIB Generator specific. Indicates that this attribute should be treated as a table. Suitable for MBean metrics that are Arrays, Lists, or Maps, if direct access to elements is desired.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    false
                    
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        
   </section>     
        
<section>
<title>Manually Generating a MIB </title>

<para>
The command below will generate a MIB file called TEST.mib based on the content of the attributes.xml file that is indicated by the (-a) parameter. 

</para>

          <screen>  java -jar $TELSCALE_HOME/client/mibgen-generator-1.0-executable.jar -a attributes.xml -m TEST-MODULE -o TEST.mib</screen>
        
   

<para>
Below is an example of an &lt;mbean&gt; using a wildcard definition:

</para>
        
          <screen>&lt;mbean name="jboss.web:host=localhost,path=*,type=Manager" oid-prefix="1.3.6.1.4.1.2312.100.1.1.30.1" definition-name="testTableDef" table-name="test" status="current"&gt;
Â Â Â Â Â  &lt;attribute name="distributable" oid=".2" snmp-type="INTEGER"/&gt;
Â Â Â Â Â  &lt;attribute name="sessionCounter" oid=".3" snmp-type="INTEGER"/&gt;
Â Â Â Â Â  &lt;attribute name="activeSessions" oid=".4" snmp-type="INTEGER"/&gt;
&lt;/mbean&gt;</screen>
        
        <para>Since the name attribute in this definition is a wildcard, it may match more than one MBean on the MBeanServer. The snmp-adaptor will put all values into a table, which is indexed by the ObjectName returned by a query into the MBean server on the given wildcard.</para>
        

<para>

The java command below will generate a MIB file based on the mss-attrbutes.xml file. 
</para>
          <screen>java -jar jboss-as-varia-mib-generator.jar -a mss-attributes.xml -m TEST-MODULE -o TEST.mib</screen>
        
        
         
        
          <screen>-- This MIB Generated by the &PLATFORM_NAME; MIB Generator

TEST-MODULE DEFINITIONS ::=BEGIN

IMPORTS
Â Â  Â OBJECT-TYPE,
Â Â  Â NOTIFICATION-TYPE,
Â Â  Â Counter32,
Â Â  Â Gauge32,
Â Â  Â Counter64,
Â Â  Â TimeTicks
Â Â  Â Â Â  Â FROM SNMPv2-SMI
Â Â  Â DisplayString,
Â Â  Â TruthValue
Â Â  Â Â Â  Â FROM SNMPv2-TC;

mobicentsSipServletsÂ Â  Â Â Â  Â OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 2312 100 1 11 1 }
jbossAsObjectsÂ Â  Â Â Â  Â OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 2312 100 1 }
sipManagerTableDefÂ Â  Â Â Â  Â OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 2312 100 }
sipApplicationDispatcherÂ Â  Â Â Â  Â OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 2312 100 1 11 }
systemÂ Â  Â Â Â  Â OBJECT IDENTIFIER ::= { 1 3 6 1 2 1 1 }

activeThreadCount OBJECT-TYPE
Â Â  Â SYNTAX OCTET STRING (SIZE(0..255))
Â Â  Â ACCESS read-only
Â Â  Â STATUS current
Â Â  Â DESCRIPTION
Â Â  Â Â Â  Â ""
::= { jbossAsObjects 1 }

.
.


(truncated ouput)

.
.


sipManagerTable OBJECT-TYPE
Â Â  Â SYNTAXÂ Â  Â SEQUENCE OF SipManagerEntry
Â Â  Â MAX-ACCESSÂ Â  Â not-accessible
Â Â  Â STATUSÂ Â  Â current
Â Â  Â DESCRIPTION
Â Â  Â Â Â  Â ""
::= { sipManagerTableDef 11 }
sipManagerNumberOfSipApplicationSessionCreationPerSecond OBJECT-TYPE
Â Â  Â SYNTAX INTEGER
Â Â  Â ACCESS read-only
Â Â  Â STATUS current
Â Â  Â DESCRIPTION
Â Â  Â Â Â  Â ""
::= { sipManagerEntry 26 }


END</screen>
        
</section>
      <section>
<title> The notifications.xml and MIB </title> 

<para>The file is responsible for indicating how a given JMX notification should be transformed into an equivalent SNMP trap. The notification-type attribute indicates the type of JMX notification to transform. 
Below is an extract from the notifications.xml file:</para>

        <screen>&lt;notification-map-list&gt;
 &lt;mapping notification-type="jboss.snmp.agent.heartbeat" generic="3" specific="0" enterprise="1.2.3.4.5.6.7"&gt;
Â Â Â  &lt;var-bind-list wrapper-class="org.jboss.jmx.adaptor.snmp.agent.NotificationWrapperSupport"&gt;
Â Â Â Â Â  &lt;var-bind tag="a:uptime" oid="1.2.3.4.5.6.7.5"/&gt;
Â Â Â Â Â  &lt;var-bind tag="a:trapCount" oid="1.2.3.4.5.6.7.6"/&gt;
Â Â Â Â Â  &lt;var-bind tag="n:message" oid="1.2.3.4.5.6.7.7"/&gt;
Â Â Â Â Â  &lt;var-bind tag="n:sequenceNumber" oid="1.2.3.4.5.6.7.8"/&gt;
Â Â Â  &lt;/var-bind-list&gt;
Â  &lt;/mapping&gt;
&lt;/notification-map-list&gt;</screen>
      
      <para>
        This notification would catch the "jboss.snmp.agent.heartbeat" notification, and create an SNMP trap with the payload described in each var-bind, according to the var-bind-list wrapper-class. This class defines how such objects are retrieved.
        
        The values contained in generic and specific variables are to identify the traps. the OID in the enterprise variable should be the OID of the object that is emitting this trap. The trap can contain an arbitrary amount of &lt;var-bind&gt;s in its payload. It is important to make sure the &lt;var-bind&gt; tags are properly set in order to get the appropriate returned values.
      </para>
        <para>The &lt;var-bind&gt; element, which is much like the &lt;attribute&gt; element inside attributes.xml, is defined like this: &lt;var-bind tag="a:uptime" oid="1.2.3.4.5.6.7.5"/&gt;</para>
        <para>A &lt;var-bind&gt; element has two required attributes, and a single optional attribute, for use by the MIB Generator.</para>
        <informaltable>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Purpose
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Importance
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Default Value
                    
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    tag
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Used by the default wrapper class to indicate what value to retrieve.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    oid
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The OID that should be assigned to the retrieved value.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    type
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The SNMP type of this variable binding. Used by the MIB generator
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    DisplayString
                    
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>There are two different actions the MIB generator may take, based on the value of the tag attribute.</para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>
                    Value
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Result
                    
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    a:*
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The OID paired with a tag that has value a:* MUST correspond to an &lt;attirbute&gt; in attributes.xml.
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    n:*, u:*
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    A new MIB Entry is defined for each of these var-binds, with OIDs as defined. They are then included in the notification's definition in the MIB.
                    
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        
<note>
<para> Currently there is only support for scalar object based traps in &PLATFORM_NAME; SNMP adaptor.</para>

</note>
        <para>If the tag is n:* or u:*, a new entry in the MIB is defined, using the prefix "jmxNotification" for the name and modifying capitalization for readability. The SYNTAX of this new entry is defined by the type attribute.</para>
     


        

        
        <para>A table of additional attributes for the &lt;mapping&gt; element is as follows. All values in the "Importance" column are for the MIB Generator, not the snmp-adaptor.</para>
        <informaltable>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>
                  <para>
                    Name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Purpose
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Importance
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Default Value
                    
                  </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The name of the notification as it should appear in the MIB
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    notification-type
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The actual class name of the JMX notification to be intercepted
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    generic
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Part of the identification of the trap
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    specific
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Part of the OID of the trap
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    enterprise
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Part of the OID of the trap.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    inform
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    A boolean for indicating whether this trap should be an INFORM.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    False
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    security-name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Indicates the user to be associated with this trap. V3 only.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    definition-name
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The name to associate with the value in the enterprise attribute.
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Required
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Not Applicable
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    description
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    A description about what the notification is for or contains, to be placed into the MIB
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    Optional
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    ""
                    
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        
        
            </section>
      <section>
<title>How to Generate an MIB</title>

<para>Currently, there are two ways to use the MIB Generator. The first is to use the executable jar with the attributes.xml and notifications.xml files as input. The output file is a MIB that can be named as desired. 
</para>
<para>
The second is to use the maven plugin that will invoke the MIB Generator on given files at compile time, allowing you to have an MIB for your web application which is designed to run on the &PLATFORM_NAME; AS.
</para>
      
        
        <para>Using the JAR</para>
        <para>The jar has a very simple set of commands. They are as follows:</para>
        <itemizedlist>
          <listitem>
            <para>-a : The attributes file to be used, if any.</para>
          </listitem>
          <listitem>
            <para>-n : The notifications file to be used, if any.</para>
          </listitem>
          <listitem>
            <para>-m : The Module Name to be used. This Module Name is how the SNMP manager will identify the definitions in the MIB, it is not done by filename.</para>
          </listitem>
          <listitem>
            <para>-o : The output file name.</para>
          </listitem>
        </itemizedlist>
        <para>The JAR can be used with both attributes / notifications files, or just the attributes file. It is also possible to use it with just the notifications file, but the tags in such a notifications file must not include a:* tags. It must only contain tags for attributes whose definitions can be generated, such as n:* and u:* tags. The -m and -o flags are required. The -o can include the path you would like to put the final MIB.</para>
        <para>Example usage:</para>
        
          <screen>[thauser@tommycat snmp-adaptor.sar]$ java -jar jboss-snmp-5.1.1.GA-mib-generator.jar -a attributes.xml -n notifications.xml -m JBOSS-AS-VARIA -o ~/.snmp/mibs/TEST.mib</screen>
        
           
        
        <para>There is also a Maven Plugin available. Instead of specifying these files on the command line, they are included in the plugin descriptor inside your project's pom.xml. Here's an example of such a descriptor:</para>
        
          <screen>&lt;plugin&gt;
 &lt;groupId&gt;org.jboss&lt;/groupId&gt;
 &lt;artifactId&gt;mibgen-maven-plugin&lt;/artifactId&gt;
 &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
Â  &lt;configuration&gt;
Â Â  &lt;attributesFile&gt;workspace/snmp4j-int/varia/src/resources/services/snmp/deploy/attributes.xml&lt;/attributesFile&gt;
   &lt;notificationsFile&gt;workspace/snmp4j-int/varia/src/resources/services/snmp/deploy/notifications.xml&lt;/notificationsFile&gt;
Â Â  &lt;moduleName&gt;TEST-MIB&lt;/moduleName&gt;
Â Â  &lt;outputFile&gt;/home/yyz/thauser/.snmp/mibs/JBOSS-AS-VARIA.mib&lt;/outputFile&gt;
Â  &lt;/configuration&gt;
 &lt;executions&gt;
Â  &lt;execution&gt;
Â Â  &lt;phase&gt;compile&lt;/phase&gt;
Â Â Â  &lt;goals&gt;
Â Â Â Â  &lt;goal&gt;generate-mib&lt;/goal&gt;
Â Â Â  &lt;/goals&gt;
Â Â  &lt;/execution&gt;
 &lt;/executions&gt;
&lt;/plugin&gt;</screen>
</section>


</section>


<section>
<title>SNMP Graphs with OpenNMS </title>

<para>
When using any type of Network Monitoring System (NMS), you will no doubt be interested in seeing some visual representation of traffic and other important system data. This is also available for those interested in using &SHORT_PLATFORM_NAME;. The current version (at the time of writing this guide) of OpenNMS comes with predefined graphs that you can quickly tap into. The idea is to give you an overview of how to monitor your system using JMX. You can collect JMX data through the Jsr160Plugin that comes built into the OpenNMS system. That said, not everyone will be interested in the approach. You can still get to build graphs using SNMP which can contribute to applications and system management homogeneity through a common protocol. Here is a quick way to query the sample counter servlets that comes bundled with &SHORT_PLATFORM_NAME;
</para>

<para>
There are times you might need to start OpenNMS before starting Telscale in order to avoid conflicts with port numbers. Generally speaking, this should not be an issue. You can use a different port setting by using an offset when starting the &SHORT_PLATFORM_NAME; server.  See the CONFLICTING PORTS, under the Troubleshooting section further down.
</para>
<para>
In order to start &SHORT_PLATFORM_NAME; do the following:
</para>
<screen>
$TELSCALE_HOME/bin/run.sh
</screen>

<para>
In order to graph SNMP information, you will need to modify the following files in the $OPENNMS_HOME/etc directory.
</para>

<formalpara>
<title> snmp-config.xml</title>
<para>
Make sure the content of the snmp-config.xml is like the one below.
</para>

<screen>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;snmp-config retry=&quot;2&quot; timeout=&quot;3000&quot; read-community=&quot;public&quot; version=&quot;v2c&quot; xmlns=&quot;http://xmlns.opennms.org/xsd/config/snmp&quot;&gt;
    &lt;definition port=&quot;1161&quot; retry=&quot;3&quot; timeout=&quot;3000&quot; read-community=&quot;public&quot; version=&quot;v2c&quot;&gt;
        &lt;specific&gt;127.0.0.1&lt;/specific&gt;
    &lt;/definition&gt;
&lt;/snmp-config&gt;
</screen>
</formalpara>

<formalpara>
<title> poller-configuration.xml</title>
<para>
Add the following to the poller-configuration.xml file
</para>

<screen>
&lt;service name=&quot;Telscale-SNMP&quot; interval=&quot;300000&quot; user-defined=&quot;false&quot; status=&quot;on&quot;&gt;
      &lt;parameter key=&quot;retry&quot; value=&quot;2&quot; /&gt;
      &lt;parameter key=&quot;timeout&quot; value=&quot;3000&quot; /&gt;
      &lt;parameter key=&quot;port&quot; value=&quot;1161&quot; /&gt;
     &lt;parameter key=&quot;oid&quot; value=&quot;.1.3.6.1.4.1.2312.100.21.11.2.0&quot; /&gt;
   &lt;/service&gt;
</screen>
<para>
The oid above is derived from the sample application of &SHORT_PLATFORM_NAME;.  The value will be empty (zero) by default. You will need to refresh the sample counter servlet multiple times to increment the value that will be retrieved by the poller oid. Refresh this link multiple times http://127.0.0.1:8080/snmp-servlet-5.1.0.GA/snmp. (this will only work if &SHORT_PLATFORM_NAME; is running and the 127.0.0.1 represents the server IP address)
</para>

<para>
In the same poller-configuration.xml, you need to add a monitor section at the end of the file like this:
</para>
<screen>
  &lt;monitor service=&quot;Telscale-SNMP&quot; class-name=&quot;org.opennms.netmgt.poller.monitors.SnmpMonitor&quot; /&gt;
</screen>

</formalpara>


<formalpara>
<title> capsd-configuration.xml</title>
<para>
Next you need to configure the capsd-configuration.xml. Add the following into the file just above the SNMP protocol (this file is responsible for showing monitored services in the Web interface). You can access the web interface like this http://127.0.0.1:8980/opennms/index.jsp (127.0.0.1 is you server IP address). You can click on the "Node Lists" tab and select localhost to see the list of monitored service. Telscale-SNMP (you configured as seen below) should be visible after a rescan or a restart of OpenNMS.
</para>

<screen>
&lt;protocol-plugin protocol=&quot;Telscale-SNMP&quot; class-name=&quot;org.opennms.netmgt.capsd.plugins.SnmpPlugin&quot; scan=&quot;on&quot;&gt;
        &lt;property key=&quot;timeout&quot; value=&quot;3000&quot; /&gt;
    &lt;property key=&quot;retry&quot; value=&quot;2&quot;/&gt;
&lt;/protocol-plugin&gt;
</screen>


</formalpara>


<formalpara>

<title> collectd-configuration.xml</title>

<para>
The next configuration file you need to modify is $OPENNMS_HOME/etc/collectd-configuration.xml. Add the  following:
</para>

<screen>

        &lt;service name=&quot;Telscale-SNMP&quot; interval=&quot;300000&quot; user-defined=&quot;false&quot; status=&quot;on&quot;&gt;
           &lt;parameter key=&quot;collection&quot; value=&quot;default&quot;/&gt;
            &lt;parameter key=&quot;port&quot; value=&quot;1161&quot;/&gt;
            &lt;parameter key=&quot;retry&quot; value=&quot;3&quot;/&gt;
            &lt;parameter key=&quot;timeout&quot; value=&quot;3000&quot;/&gt;
            &lt;parameter key=&quot;thresholding-enabled&quot; value=&quot;true&quot;/&gt;
             &lt;parameter key=&quot;vbname&quot; value=&quot;.1.3.6.1.4.1.2312.100.21.11.2.0&quot; /&gt;
        &lt;/service&gt;
</screen>

<para>
At the end of the file add the following:
</para>
<screen>
	&lt;collector service=&quot;Telscale-SNMP&quot; class-name=&quot;org.opennms.netmgt.collectd.SnmpCollector&quot;/&gt;
</screen>

</formalpara>


<formalpara>

<title>telscale.xml</title>


<para>
Next you need to go into the $OPENNMS_HOME/etc/datacollection directory and create a new file called telscale.xml (you can use any name you want).
</para>
<para>
Copy the content below into the telscale.xml file and save. 
</para>
<screen>

&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;datacollection-group name=&quot;Telscale-SNMP&quot;&gt;

      &lt;!--Telscale MIBs --&gt;
      &lt;group  name=&quot;telscale-snmp&quot; ifType=&quot;ignore&quot;&gt;
        &lt;mibObj oid=&quot;.1.3.6.1.4.1.2312.100.21.11.2&quot; instance=&quot;0&quot; alias=&quot;telscalesnmp&quot; type=&quot;integer&quot; /&gt;
      &lt;/group&gt;
     
      &lt;systemDef name =&quot;telscale&quot;&gt;
        &lt;sysoid&gt;.1.3.6.1.4.1.2312.100.9.1.1.6&lt;/sysoid&gt;
        &lt;collect&gt;
          &lt;includeGroup&gt;telscale-snmp&lt;/includeGroup&gt;
        &lt;/collect&gt;
      &lt;/systemDef&gt;

&lt;/datacollection-group&gt;
</screen>

<para>
The oid is the same oid you polled in the poller-configuration.xml file. The alias will be used to name the .jrb file. In this case, the .jrb file will be created in $OPENNMS_HOME/share/rrd/snmp/&tt;nodeID&gt;/telscalesnmp.jrb. Another important data is the sysoid as stated below. You need to run an snmpget  command against a running Telscale server in order to get the sysObjectID. You can do that as follows:
</para>
<screen>
snmpget -On -c public -v 2c 127.0.0.1:1161  sysObjectID.0 
</screen>
<para>
That will produce the result : .1.3.6.1.2.1.1.2.0 = OID: .1.3.6.1.4.1.2312.100.9.1.1.6
</para>



</formalpara>

<formalpara>
<title>datacollection-config.xml </title>
<para>
In the datacollection-config.xml file, add the line below. Note that the dataCollectionGroup=&quot;Telscale-SNMP&quot; is the same as in the telscale.xml file you created above.
</para>

<screen>
    &lt;include-collection dataCollectionGroup=&quot;Telscale-SNMP&quot;/&gt;
</screen>


</formalpara>

<para>
You will need to restart the OpenNMS service. If you are running on a system like Fedora, do the following:
</para>
<screen>
sudo service opennms stop
sudo service opennms start
</screen>
<para>
You need to go to the $OPENNMS_HOME/etc/share/rrd/snmp/&lt;nodeID&gt; to make sure a file named telscalensmp.jrb has been created. If this file doesn't exist, you will not be able to see graphs in the Web interface reports page.
</para>
<para>
You can make sure you are able to see default graphs by going to
 http://127.0.0.1:8980/opennms/index.jsp > reports > Resource Graphs > Localhost > Select All > Graph Selection

</para>


<formalpara>
<title>snmp-graph.properties</title>

<para>
Once you have your telscalesnmp.jrb files, you need to config the $OPENNMS_HOME/etc/snmp-graph.properties files
</para>

<para>
Add the line below at the top, inside the reports variable
</para>
<screen>
telscale.counter, \
</screen>

<para>
then further down add the following:
</para>

<screen>

######
###### Telscale SNMP Counter
######

report.telscale.counter.name=Telscale Counter
report.telscale.counter.columns=telscalesnmp
report.telscale.counter.type=nodeSnmp
report.telscale.counter.command=--title=&quot;Telscale SNMP Sample Counter&quot; \
 DEF:telcounter={rrd1}:telscalesnmp:AVERAGE \
 LINE1:telcounter#0000ff:&quot;Completed Updates&quot; \
 GPRINT:telcounter:AVERAGE:&quot; Avg \\: %8.2lf %s\\n&quot;
</screen>

<para>
Note that the telscale.counter is needed inside the reports variable (at the top of the file) for the graphs to be displayed in the Web Interface of OpenNMS. The columns=telscalesnmp refers to the generated .jrb file (without the extension) as seen in the $OPENNMS_HOME/share/rrd/snmp&lt;nodeID&gt;/ *.jrb
</para>

</formalpara>

<para>
Once you have gone through the steps above, you should see a &SHORT_PLATFORM_NAME; appear like the screenshot below:
</para>


 <figure>
<title>&SHORT_PLATFORM_NAME; SNMP Graph</title>
<mediaobject id="snmp-opennms-graph">
<imageobject>
<imagedata align="center" fileref="images/Snmp-opennms-graph.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>



<formalpara>

<title>Troubleshooting</title>

<screen>


I don't see Telscale-SNMP in the node list of services in the Web Interface

 - Click on the rescan tab if that doesn't help, try the following:
 - Click on the tab Admin
 under Node Provisioning > Manage Provisioning Requisitions
 - Add a new group (choose a name ex. Telscale_server)
under the Telscale_server, 
 - Click on the Requisition &quot;Edit&quot; link
 - Click on Add Node (give the node a name and press &quot;save&quot;)
on the newly added node, 
 - Click on &quot;
 - Add Interface&quot;
 - Add the ip address of the localhost 127.0.0.1
make sure the &quot;SNMP Primary&quot; value is set to &quot;P&quot; (OpenNMS will not create .jrb files if your IP address is not set to primary)
under the 127.0.0.1 interface, 
 - Click on 'Add Service&quot;
in the dropdown menu list, scroll down and select Telscale-SNMP
 - Click on &quot;Save&quot; and 
 - Click on &quot;Done&quot; at the upper right corner of the screen
 - Click Synchronize.
You should now see the Telscale-SNMP service and also .jrb files created.

----------------------------------------------DEBUGGING OPENNMS-------------------------------------------------------------

I still don't get .jrb files what can I do next?

- You can turn on debug to catch more exceptions.

Go to the $OPENMS_HOME/etc/log4j.properties

turn on debug in the collected section by changing

log4j.category.OpenNMS.Collectd=WARN, COLLECTD

to

log4j.category.OpenNMS.Collectd=DEBUG, COLLECTD

It is always good to restart OPenNMS

Then go and take a look at the logs in $OPENNMS_HOME/logs/daemon/collected.logs

-------------------------------------------CONFLICTING PORTS-------------------------------------------------------


To avoid any conflicts with &SHORT_PLATFORM_NAME; you can start &SHORT_PLATFORM_NAME; like this : 

sh bin/run.sh -Djboss.service.binding.set=ports-02

This command offset all the ports used by JBoss by 200.
This can also be useful when running in a clustered environment of &SHORT_PLATFORM_NAME; on a single server.


You will need to modify the opennms $OPENNMS_HOME/etc/service_configuration.xml file :

&lt;service&gt;
    &lt;name&gt;:Name=HttpAdaptor&lt;/name&gt;
    &lt;class-name&gt;mx4j.tools.adaptor.http.HttpAdaptor&lt;/class-name&gt;
    &lt;attribute&gt;
      &lt;name&gt;Port&lt;/name&gt;
      &lt;value type=&quot;java.lang.Integer&quot;&gt;8180&lt;/value&gt;
    &lt;/attribute&gt;


Change the line 
      &lt;value type=&quot;java.lang.Integer&quot;&gt;8180&lt;/value&gt;
to 
      &lt;value type=&quot;java.lang.Integer&quot;&gt;8380&lt;/value&gt;


This will reflect the 200 offset used above.
</screen>



</formalpara>



</section>

</section>

