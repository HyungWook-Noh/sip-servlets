<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>
<!-- chapter id nickname: sscacc -->
<section id="sscacc-MSS_Congestion_Control">
  <title>Congestion Control</title>
  <para>Congestion control refer to settings that
  define the way in which messages are processed under heavy load. The way &PLATFORM_NAME; SIP Servlets Server processes messages in a production environment is crucial to ensure quality of service for customers.</para>
  <para>Congestion Control tuning affects the point at which the server
  begins rejecting new requests. <!--This parameter can be set using the following methods: </para>
  <para><itemizedlist>
      <listitem>
        <para>Through the SIP Servlets Management Console.</para>
      </listitem>
      <listitem>
        <para>Editing
  the server&apos;s <filename>mss-sip-stack.properties</filename> configuration file.</para>
      </listitem>
      <listitem>
        <para>From the
  <literal>dispatcher</literal> MBean.</para>
      </listitem>
      <listitem>
        <para>From the Embedded Jopr integrated
  management platform.</para>
      </listitem>
    </itemizedlist--></para>      
  <note>

<title>Changing Congestion Control Settings </title>
<para>
All the settings and congifurations starting with gov.nist.javax.sip are located in the $JBOSS-HOME/standalone/configuration/mss-sip-stack.properties file. The section below will provide further details.
</para>
</note>
  <para>&PLATFORM_NAME; Sip Servlets currently provides the following  congestion
    control mechanisms:</para>
      <para>Congestion control is largely application-specific and it is implemented in a pipeline.
       
      First messages arrive in the JAIN SIP message queue where they will wait on the locks needed 
      before they can be processed. To avoid keeping too many messages in the queue and potentially
       running out of memory, older messages are discarded without any error indication. 
       
       This prevents spam and flood DoS attacks to accumulate large backlog and render the server unresponsive. It also
         guranatees flood recovery time of 20 seconds or less, in the mean time retransmissions are
          already queuing so that normal SIP calls can continue without dropping them. After the request has passed the first 
          queue it enters the SIP transaction layer where there is a customizable optional congestion control logic.
          
          There is one pre-packaged congestion control algorithm which can be enabled by setting the following property
           <literal>gov.nist.javax.sip.SIP_MESSAGE_VALVE=org.mobicents.ext.javax.sip.congestion.CongestionControlMessageValve</literal>.
           
           This Congestion Control algrithm monitors at regular intervals whether or not the configured congestion control mechanisms have switched on or off.
 		   
			The following congestion control mechanisms are available :
 		    <variablelist>
 		    <varlistentry>
		      <term>Memory</term>
		      <listitem>
		        <para>Monitor if the JVM Used Memory has crossed the <literal>org.mobicents.ext.javax.sip.congestion.MEMORY_THRESHOLD</literal> threshold or
		         went back under <literal>org.mobicents.ext.javax.sip.congestion.BACK_TO_NORMAL_MEMORY_THRESHOLD</literal> threshold</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term>CPU</term>
		      <listitem>
		        <para>Monitor if the Process Used CPU has crossed the <literal>org.mobicents.ext.javax.sip.congestion.CPU_THRESHOLD</literal> threshold
		         or went back under <literal>org.mobicents.ext.javax.sip.congestion.BACK_TO_NORMAL_CPU_THRESHOLD</literal> threshold</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term>Server Transactions</term>
		      <listitem>
		        <para>Monitor if the number of active Server Transactions has crossed the <literal>org.mobicents.ext.javax.sip.congestion.SERVER_TRANSACTIONS_THRESHOLD</literal> threshold or 
		        went back under <literal>org.mobicents.ext.javax.sip.congestion.BACK_TO_NORMAL_SERVER_TRANSACTIONS_THRESHOLD</literal> threshold</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term>Dialogs</term>
		      <listitem>
		        <para>Monitor if the number of active Dialogs has crossed the <literal>org.mobicents.ext.javax.sip.congestion.DIALOGS_THRESHOLD</literal> threshold or 
		        went back under <literal>org.mobicents.ext.javax.sip.congestion.BACK_TO_NORMAL_DIALOGS_THRESHOLD</literal> threshold</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		<para>Experimentation is required for these tuning parameters depending on the operating system and server.</para>
		 <note>
		
		<title>Disabling specific Congestion Control Mechanisms </title>
		<para>
		Any congestion control mechanism can be disabled by setting their threshold properties to a negative value
		</para>
		</note>

          You can also implement your own algorithm or extend the packaged one (if you need, by example, to add any header to the response generated back (like Retry-After Header) 
          by overriding the <literal>org.mobicents.ext.javax.sip.congestion.CongestionControlMessageValve.modifyCongestionResponse(SIPResponse response))</literal> 
          and change the class name in <literal>gov.nist.javax.sip.SIP_MESSAGE_VALVE</literal> to activate it.</para><para>
          
          <note>         
          <title>Legacy Congestion Control Mechanisms</title>
          <para>
          There is also another optional legacy congestion
           control stage at the &PLATFORM_NAME; SIP Servlets Server level (whose parameters can be modified thrugh server.xml, JMX MBean or the Consoles) 
           with another queue where messages can be discarded based on dynamic parameters
            such as available JVM heap memory or number of messages in the queue. This method is <emphasis>deprecated</emphasis> and is not recommended since it is best 
            to make those decisions as early as possible to avoid consuming resources, thus the recommended approach is to use the Stack parameters as seen above.</para>
             </note>
            All SIP messages which cannot be processed immediately are putinto a queue, and  wait for either a free thread or for the lock
      on their session to be released.</para>
    
      <para>When the Congestion Control is enabled and one of the threshold is crossed, the
      container immediately begins rejecting new SIP requests until the back to normal threshold is crossed. This is achieved by using one of the following methods:</para>
      <itemizedlist>
        <listitem>
          <para>Sending a <literal>503</literal> SIP error code to the originating application.</para>
        </listitem>
        <listitem>
          <para>Dropping  incoming
      messages (according to the specified  congestion control policy).</para>
        </listitem>
      </itemizedlist>
      <para>The drop policy is specified in the <literal>org.mobicents.ext.javax.sip.congestion.DROP_RESPONSE_STATUS</literal> property where "0" or negative value means silent drop and
      any positive number will be interpreted as the status code of the error response that will be generated.</para>
  
  <para>A background task gathers information about the current server congestion. The data collection interval  can be adjusted, and congestion control deactivated,  by setting the interval to 0 or a
  negative value through <literal>org.mobicents.ext.javax.sip.congestion.CONGESTION_CONTROL_MONITOR_INTERVAL</literal> property.</para>
  
  <!-- formalpara id="sscacc-Configuring_the_Congestion_Control_Settings">
    <title>Configuring the Congestion Control Settings</title>
    <para>The congestion control settings can be configured
    through the SIP Servlets Management Console, using the following methods: </para>
  </formalpara>
  <para><itemizedlist>
      <listitem>
        <para>Through the SIP Servlets Management Console.</para>
      </listitem>
      <listitem>
        <para>Editing
  the server&apos;s <filename>server.xml</filename> configuration file.</para>
      </listitem>
      <listitem>
        <para>From the
  <literal>dispatcher</literal> MBean.</para>
      </listitem>
      <listitem>
        <para>From the Embedded Jopr integrated
  management platform.</para>
      </listitem>
    </itemizedlist></para>
  <variablelist>
    <varlistentry>
      <term>Tuning Parameters with the SIP Servlets Management Console</term>
      <listitem>
        <para>The easiest way to configure the <guilabel>Congestion Control</guilabel>
        tunable parameters is to open the <literal>SIP Servlets Management Console</literal> in your browser (by going to <ulink url="http://localhost:8080/sip-servlets-management"/>), making
        your changes, and then clicking <guibutton>Apply</guibutton>. </para>
        <figure>
          <title>SIP Servlets Management Console Congestion Control Tuning Parameters</title>
          <mediaobject id="sscacc-sas-MSSSManagementConsole-ss-ServerSettings-2">
            <imageobject>
              <imagedata width="440" align="center" fileref="images/mss-MSSSManagementConsole-ss-ServerSettings.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <important>
          <title>Persistent Settings</title>
          <para>Congestion control settings altered through the SIP Servlets Management Console are not saved to the <filename>server.xml</filename> configuration file.  </para>
          <para>To make settings persistent, append the settings to  the <filename>server.xml</filename> file directly.  </para>
        </important>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Tuning Parameters Permanently by Editing <filename>server.xml</filename></term>
      <listitem>
        <para>Alternatively, you can edit your server&apos;s
        <filename>server.xml</filename> configuration file, which has the
        benefit of making your chosen settings changes permanent. Instructions
        follow, grouped by the SIP Servlets Server you are running:</para>
        <procedure>
          <title>Tuning &PLATFORM_NAME; SIP Servlets for JBoss Server Settings for Congestion Control</title>
          <step>
            <title>Open server.xml File</title>
            <para>Open the
            <filename><envar>$JBOSS_HOME</envar>/server/default/deploy/jboss-web.deployer/server.xml</filename>
            configuration file in a text editor.</para>
          </step>
          <step>
            <title>Add Parameters to &lt;service&gt; Element</title>
            <para>Locate the <markup>&lt;service&gt;</markup> element, and add the
            <literal>concurrencyControlMode</literal> and/or 
            <literal>sipMessageQueueSize</literal> attributes.</para>
            <example id="sscacc-MSSJ-Permanently_Changing_Tunable_Parameters_by_Editing_server.xml">
              <title>server.xml Concurrency and Congestion Control Attributes</title>
              <programlisting role="XML">&lt;Service
 name=&quot;jboss.web&quot;
 className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
 sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
 usePrettyEncoding=&quot;false&quot;
 sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;
 darConfigurationFileLocation=&quot;conf/dars/mobicents-dar.properties&quot;
 concurrencyControlMode=&quot;SipApplicationSession&quot;
 congestionControlCheckingInterval=&quot;2000&quot;
 congestionControlPolicy=&quot;DropMessage&quot;
 memoryThreshold=&quot;95&quot; 
 backToNormalMemoryThreshold=&quot;90&quot;&gt;</programlisting>
            </example>            
          </step>
          <step>
            <title>Define the Correct Attribute Values</title>
            <para>The following  default values for the concurrency and congestion control parameters are used regardless of whether the attributes are defined in the <filename>server.xml</filename> file:</para>
            <itemizedlist>              
              <listitem>
                <para>congestionControlCheckingInterval=&quot;30000&quot; (30 seconds, in milliseconds)</para>
              </listitem>
              <listitem>
                <para>memoryThreshold=&quot;95&quot; (in percentage)</para>
              </listitem>
               <listitem>
                <para>backToNormalMemoryThreshold=&quot;90&quot; (in percentage)</para>
              </listitem>
              <listitem>
                <para>congestionControlPolicy=&quot;ErrorResponse&quot;</para>
              </listitem>
            </itemizedlist>
            
          </step>
        </procedure>
        <procedure>
          <title>Tuning &PLATFORM_NAME; SIP Servlets for Tomcat Server Settings for Concurrency and Congestion Control</title>
          <step>
            <title>Open server.xml File</title>
            <para>Open the
            <filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename>
            configuration file in your text editor.</para>
          </step>
          <step>
            <title>Add Parameters to &lt;service&gt; Element</title>
            <para>Locate the <markup>&lt;service&gt;</markup> element, and add the
            <literal>concurrencyControlMode</literal> and/or 
            <literal>sipMessageQueueSize</literal> attributes.</para>
            <para>Possible values for the
            <literal>concurrencyControlMode</literal> attribute include:
            <replaceable>None</replaceable>,
            <replaceable>SipSession</replaceable> or
            <replaceable>SipApplicationSession</replaceable>.
            <replaceable>SipSession</replaceable> is the value of this
            attribute when it is not present—and overridden—in
            <filename>server.xml</filename>.</para>
          </step>
          <step>
            <title>Define the Correct Attribute Values</title>
            <para>The following  default values for the concurrency and congestion control parameters are used regardless of whether the attributes are defined in the <filename>server.xml</filename> file:</para>
            <itemizedlist>
              <listitem>
                <para>sipMessageQueueSize=&quot;1500&quot;</para>
              </listitem>
              <listitem>
                <para>backToNormalSipMessageQueueSize=&quot;1300&quot;</para>
              </listitem>
              <listitem>
                <para>congestionControlCheckingInterval=&quot;30000&quot; (30 seconds, in milliseconds)</para>
              </listitem>
              <listitem>
                <para>memoryThreshold=&quot;95&quot; (in percentage)</para>
              </listitem>
               <listitem>
                <para>backToNormalMemoryThreshold=&quot;90&quot; (in percentage)</para>
              </listitem>
              <listitem>
                <para>congestionControlPolicy=&quot;ErrorResponse&quot;</para>
              </listitem>
            </itemizedlist>
            <para>Experimentation is required for these tuning parameters depending on the operating system and server.</para>
          </step>
        </procedure>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Tuning Parameters from the dispatcher MBean</term>
      <listitem>
        <para>Navigate to the <literal>dispatcher</literal> MBean from
        &PLATFORM_NAME; SIP Servlets for JBoss&apos;s JMX console. </para>
        <para>All changes performed
        at run time are effective immediately, but do not persist across
        reboots.  As with JBoss and Tomcat, the   <filename>server.xml</filename> must be appended with the settings in order to make the configuration persistent.</para>
        <para>When editing the <literal>dispatcher</literal> MBean from
        &PLATFORM_NAME; SIP Servlets for JBoss&apos;s JMX console, values allowed for the
        concurrency control mode are <userinput>None</userinput>,
        <userinput>SipSession</userinput> or
        <userinput>SipApplicationSession</userinput>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Tuning Parameters from Enterprise Monitoring and Managent Console</term>
      <listitem>
        <para>If  the Enterprise Monitoring and Managenemt console is installed as described in <xref linkend="emom-Enterprise-Monitoring-Operations-Management"/>, the tunable parameters can be altered by  following the instructions  in <xref linkend="emom-Embedded-Jopr"/> or <xref linkend="emom-Jopr4Production"/></para>
      </listitem>
    </varlistentry>
  </variablelist-->
</section>
